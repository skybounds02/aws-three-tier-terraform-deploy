name: Deploy to AWS with Terraform

on:
  push:
    branches:
      - main
permissions:
  contents: write
  id-token: write
jobs:
  deploy-iac:
    runs-on: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout repository.
        uses: actions/checkout@v2

      - name: Setup GitHub OIDC
        run: | 
           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
           unzip awscliv2.zip
           sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update


      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            # Removed role-to-assume as requested
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
            cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}



      - name: 'Install tfsec for security scanning'
        run: |
          curl -sLo tfsec https://github.com/aquasecurity/tfsec/releases/download/v1.28.11/tfsec-linux-amd64
          chmod +x tfsec
          ./tfsec --version

      - name: 'Terraform Init'
        run: terraform init

      - name: 'Terraform Format'
        run: terraform fmt

      - name: 'Terraform Validate'
        run: terraform validate

      - name: 'tfsec Security Scan.'
        run: ./tfsec . || true

      - name: Terraform Plan
        run: terraform plan 

     # - name: Terraform Apply.
     #   run: terraform apply -auto-approve 

     # - name: 'install kubectl'
     #   run: |
     #     curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
     #     chmod +x ./kubectl
     #     sudo mv ./kubectl /usr/local/bin/kubectl

    #  - name: 'authenticate to EKS Cluster'
#        run: aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region us-east-1
      
    #  - name: 'Deploying the ClusterIssuer to EKS'
     #   run: kubectl apply -f ClusterIssuer.yaml

   #   - name: 'Deploying argocd ingress rule to EKS'
   #     run: kubectl apply -f ingress-argocd.yaml -n argocd
   #   - name: Get and show ArgoCD password (TEMPORARY)
   #     run: |
    #      ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
   #       echo "UNMASKED PASSWORD FOR MANUAL LOGIN: $ARGOCD_PASSWORD"
   #       echo "::warning::This exposes the password in logs - remove this step after use!"
   #       echo "ARGOCD_PASSWORD=$ARGOCD_PASSWORD" >> $GITHUB_ENV
   #       echo "::add-mask::$ARGOCD_PASSWORD"
   #   - name: Show password (masked)
   #     run: |
    #      echo "Password is: $ARGOCD_PASSWORD"  # Will appear as *** in logs due to masking

      - name: Terraform Destroy
        run: terraform destroy -auto-approve 

      - name: Check Running EC2 Instances
        run: |
          echo "Checking for running EC2 instances..."
          aws ec2 describe-instances \
            --query 'Reservations[].Instances[?State.Name==`running`].[InstanceId, Tags[?Key==`Name`].Value | [0], State.Name]' \
            --output table

      - name: Check Load Balancers
        run: |
          echo "Checking for active Load Balancers..."
          aws elbv2 describe-load-balancers \
            --query 'LoadBalancers[].[LoadBalancerName, Type, State.Code]' \
            --output table

      - name: Check RDS Instances
        run: |
          echo "Checking for RDS instances..."
          aws rds describe-db-instances \
            --query 'DBInstances[?DBInstanceStatus!=`deleted`].[DBInstanceIdentifier, DBInstanceStatus]' \
            --output table

      - name: Check S3 Buckets
        run: |
          echo "Listing all S3 buckets..."
          aws s3 ls

      - name: Check VPC Resources
        run: |
          echo "Checking VPC resources..."
          # Check for non-default VPCs
          aws ec2 describe-vpcs \
            --query 'Vpcs[?IsDefault==`false`].[VpcId, CidrBlock]' \
            --output table
          
          # Check for Internet Gateways
          aws ec2 describe-internet-gateways \
            --query 'InternetGateways[].InternetGatewayId' \
            --output table

      - name: Check Lambda Functions
        run: |
          echo "Checking Lambda functions..."
          aws lambda list-functions \
            --query 'Functions[].FunctionName' \
            --output table

      - name: Check EKS Clusters
        run: |
          echo "Checking EKS clusters..."
          aws eks list-clusters \
            --query 'clusters' \
            --output table

      - name: Generate Summary Report
        run: |
          echo "=== AWS RESOURCE SUMMARY ===" > resource-report.txt
          echo "EC2 Instances:" >> resource-report.txt
          aws ec2 describe-instances --query 'length(Reservations[].Instances[?State.Name==`running`])' >> resource-report.txt
          
          echo "Load Balancers:" >> resource-report.txt
          aws elbv2 describe-load-balancers --query 'length(LoadBalancers)' >> resource-report.txt
          
          echo "RDS Instances:" >> resource-report.txt
          aws rds describe-db-instances --query 'length(DBInstances)' >> resource-report.txt
          
          echo "S3 Buckets:" >> resource-report.txt
          aws s3 ls | wc -l >> resource-report.txt
          
          cat resource-report.txt
